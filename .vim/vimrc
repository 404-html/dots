"""" MUST HAVE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocp
set encoding=utf8

no <c-h> <c-w>h
no <c-j> <c-w>j
no <c-k> <c-w>k
no <c-l> <c-w>l

set number

set tabstop=4
set shiftwidth=4
set cindent
set expandtab

set incsearch
set ignorecase
set smartcase

set nohidden

filetype plugin indent on
syntax on

cmap w!! w !sudo tee % > /dev/null

" Normal backspace behaviour
set bs=2

" Xorg clipboard integration
if has("clipboard")
    set clipboard=unnamedplus
    " Save clipboard content after exit
    autocmd VimLeave * call system("xsel -ib", getreg('+'))
endif

no J <C-e>j
no K <C-y>k

" Trailing spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd BufWritePre *.ts,*.py,*.scss,*.css,*.html,*.js :call <SID>StripTrailingWhitespaces()




"""" APPEARANCE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"if has("termguicolors")     " set true colors
"    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"    set termguicolors
"endif
set t_Co=256

" Different cursor for different modes
"let &t_SI = "\<esc>[6 q"
"let &t_SR = "\<esc>[5 q"
"let &t_EI = "\<esc>[2 q"




"""" MISCELLANEOUS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Source vimrc on save
"au! BufWritePost vimrc source %

" Remain in visual mode after indenting
vno < <gv
vno > >gv

" Enable mouse in all modes
set mouse=a

" Expand history
set history=1000
set undolevels=1000

" Enable default completion
set omnifunc=syntaxcomplete#Complete

" Indent for web
au FileType html,css,scss,sass,less,djangohtml,js
            \ set tabstop=2 |
            \ set shiftwidth=2

" Indent for yaml
au FileType yaml,yml
            \ set tabstop=2 |
            \ set shiftwidth=2

" Show menu for any number of completions
" Don't select any by default
" Don't insert when selecting completion untill selection confirmed
set completeopt=menu,menuone,noselect,noinsert

" Enter insert mode for commit messages
au! FileType gitcommit startinsert

" DVC filetype
autocmd! BufNewFile,BufRead Dvcfile,*.dvc setfiletype yaml

set colorcolumn=73


"""" PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" For plugin related commands
let mapleader = ' '

" vim-plug

call plug#begin('~/.vim/plug')

" General
Plug 'ctrlpvim/ctrlp.vim'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dracula/vim', { 'as': 'dracula' }

" Python
"Plug 'python-mode/python-mode', { 'branch': 'develop', 'for': 'python' }

" Web
Plug 'mattn/emmet-vim', { 'for': ['html', 'djangohtml'] }
Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
Plug 'othree/html5.vim'
Plug 'Valloric/YouCompleteMe',
            \ { 'do': './install.py --ts-completer --clang-completer', 
            \ 'for': ['javascript', 'typescript', 'c', 'cpp', 'python']
            \ }
Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' }

call plug#end()


" ctrlp
let g:ctrlp_custom_ignore = 'node_modules\|silky_profiler'


" vim-easymotion

let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_upper = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_prompt = 'Search for {n} character(s): '
let g:EasyMotion_grouping = 2
map <leader>f <Plug>(easymotion-s)


" NERDTree

let g:NERDTreeNaturalSort = 1
no <silent> <leader>t :NERDTreeToggle<CR>


" emmet-vim

let g:user_emmet_mode = 'i'
let g:user_emmet_install_global = 0
" Use natural way to expand emmet expressions
autocmd FileType html EmmetInstall |
            \ imap <buffer> <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")


" vim-airline

let g:airline_powerline_fonts = 1
let g:airline_theme = 'dracula'


" Dracula
let g:dracula_colorterm = 0
colorscheme dracula


" python-mode

let g:pymode = 1

let g:pymode_python = 'python3'

" Features
let g:pymode_warnings = 1
let g:pymode_trim_whitespaces = 1
let g:pymode_options = 1
let g:pymode_indent = 1
let g:pymode_folding = 0
let g:pymode_motion = 1
let g:pymode_doc = 0
let g:pymode_virtualenv = 1
let g:pymode_run = 1
let g:pymode_breakpoint = 0 " breaks pymode
let g:pymode_lint = 0       " breaks pymode
let g:pymode_rope = 1
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_regenerate_on_write = 1
let g:pymode_syntax = 1

" Options
let g:pymode_rope_lookup_project = 0

" Keymap
let g:pymode_breakpoint_bind = '<leader>b'
let g:pymode_rope_show_doc_bind = '<leader>d'
let g:pymode_rope_completion_bind = '<tab>'
au FileType python ino <s-tab> <c-p>
let g:pymode_rope_goto_definition_bind = '<leader>g'
let g:pymode_rope_rename_bind = '<leader>r'


" YouCompleteMe

" As-you-type completion
let g:ycm_warning_symbol = '--'
let g:ycm_filetype_blacklist = { '*': 1 }
let g:ycm_filetype_whitelist = { 'javascript': 1,
                               \ 'typescript': 1,
                               \ 'c': 1,
                               \ 'cpp': 1,
                               \ 'python': 1 }
let g:ycm_filepath_blacklist = { '*': 1 }
let g:ycm_semantic_triggers = {
      \ 'javascript,typescript': [
        \ "re!(import|export)(\\s+?)(.*?)from(\\s*?)\[\"'](.*\[\"']?)"
        \ ]
      \ }
no <Space>c :YcmCompleter FixIt<CR>
no <Space>g :YcmCompleter GoTo<CR>
no <Space>G :YcmCompleter GoToType<CR>
no <Space>r :YcmCompleter GoToReferences<CR>
no <Space>d :YcmCompleter GetDoc<CR>
no <Space>T :YcmCompleter GetType<CR>
no <Space>R :YcmCompleter RefactorRename 

" Don't show YCM's preview window
let g:ycm_add_preview_to_completeopt = 0

" Clang config
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
